Commit from hostView.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Table-top Stat Tracker</title>
    <link rel="stylesheet" href="hostView_stylesheet.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
</head>
<body>
    <header class="header">
        <img src="dndLogo.png" alt="DnD Logo" class="logo-icon"> 
        <div class="dice-section">
            <span>Dice: </span>
            <button class="dice-button">Roll</button>
        </div>
    </header>
    <div class="container">
        <div class="fade-in-text">
            <p>Retro Roller</p>
        </div>
        
        <h2 class = "fade-in-text">Virtual Table-Top Stat Tracker</h2>
        <button id="add-player">Add Player</button>
        <div id="players-container"></div>
    </div>

    <script>
        const playerContainer = document.getElementById('players-container');
        const addPlayerBtn = document.getElementById('add-player');

        addPlayerBtn.addEventListener('click', function() {
            const playerDiv = document.createElement('div');
            playerDiv.className = 'player';

            playerDiv.innerHTML = `
                <img src="player_icon.png" alt="Player Icon" class="player-icon" style="filter: hue-rotate(${Math.floor(Math.random() * 570)}deg)"">
                <input type="text" placeholder="Player Name" class="player-name">

                <div class="stat-container">
                    <label class="attribute">
                        <input type="text" value="" class="attribute-name">: 
                        <button class="stat-button decrement">-</button>
                        <input type="number" class="stat-input" value="0">
                        <button class="stat-button increment">+</button>
                    </label>
                </div>

                <button class="add-attribute">Add Attribute</button>
                <button class="remove-attribute">Remove Attribute</button>

                <!-- Dynamic List Section -->
                <h3>Inventory</h3>
                <ul class="inventory"></ul>
                <input type="text" class="item-input" placeholder="Add an item">
                
                <button class="add-item">Add Item</button>

                <button class="remove-player">Remove Player</button>

            `;

            const statInput = playerDiv.querySelector('.stat-input');
            const incrementBtn = playerDiv.querySelector('.increment');
            const decrementBtn = playerDiv.querySelector('.decrement');

            incrementBtn.addEventListener('click', function() {
                statInput.value = parseInt(statInput.value) + 1;
            });

            decrementBtn.addEventListener('click', function() {
                statInput.value = parseInt(statInput.value) - 1; // allow negative values
            });

            const addAttributeBtn = playerDiv.querySelector('.add-attribute');
            addAttributeBtn.addEventListener('click', function() {
                const newAttribute = document.createElement('div');
                newAttribute.className = 'stat-container';
                newAttribute.innerHTML = `
                    <label class="attribute">
                        <input type="text" value="" class="attribute-name">: 
                        <button class="stat-button decrement">-</button>
                        <input type="number" class="stat-input" value="0">
                        <button class="stat-button increment">+</button>
                    </label>
                `;

                const incrementNew = newAttribute.querySelector('.increment');
                const decrementNew = newAttribute.querySelector('.decrement');
                const statInputNew = newAttribute.querySelector('.stat-input');

                incrementNew.addEventListener('click', function() {
                    statInputNew.value = parseInt(statInputNew.value) + 1;
                });

                decrementNew.addEventListener('click', function() {
                    statInputNew.value = parseInt(statInputNew.value) - 1;
                });

                playerDiv.insertBefore(newAttribute, addAttributeBtn);
            });

            const removeAttributeBtn = playerDiv.querySelector('.remove-attribute');
            removeAttributeBtn.addEventListener('click', function() {
                const attributes = playerDiv.querySelectorAll('.stat-container');
                //if (attributes.length > 1) {
                    attributes[attributes.length - 1].remove(); // remove the last attribute
                //}
            });

            const removePlayerBtn = playerDiv.querySelector('.remove-player');
            removePlayerBtn.addEventListener('click', function() {
                playerDiv.remove();
            });

            // adding items to the dynamic list
            const addItemBtn = playerDiv.querySelector('.add-item');
            addItemBtn.addEventListener('click', function() {
                const input = playerDiv.querySelector('.item-input');
                const itemText = input.value.trim();

                if (itemText) {
                    const li = document.createElement('li');
                    li.textContent = itemText;

                    const removeBtn = document.createElement('button');
                    removeBtn.textContent = 'X';
                    removeBtn.className = 'remove-item';
                    removeBtn.addEventListener('click', function() {
                        li.remove();
                    });

                    li.appendChild(removeBtn);
                    playerDiv.querySelector('.inventory').appendChild(li);
                    input.value = ''; // clear input
                }
            });
            
            playerContainer.appendChild(playerDiv);
        });
    </script>
</body>
</html>

Commit from hostView_stylesheet.css:

@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
/* import retro font */

.vt323-regular {
  font-family: "VT323", monospace;
  font-weight: 400;
  font-style: normal;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    background-color: #323131;
    color: #fff;
    font-family: 'Press Start 2P', cursive;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    position: relative;
}

.container {
    text-align: center;
}

h1 {
    color: #ffffff;
    margin-bottom: 20px;
}

h2 {
  color: #ffffff;
  margin-bottom: 20px;
  font-size: 10px;
}

button {
    font-family: inherit;
    background-color: #f72585;
    color: white;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 1rem;
    margin-bottom: 20px;
    transition: background-color 0.3s;
}

button.add-item {
  font-family: inherit;
  background-color: #f8d210;
  opacity: 0.6;
  color: rgb(0, 0, 0);
  border: none;
  padding: 10px 10px;
  cursor: pointer;
  font-size: 0.6rem;
  margin-bottom: 30px;
  transition: background-color 0.3s;
}

button:hover {
    background-color: #7209b7;
}

#players-container {
    display: flex;
    flex-wrap: wrap;
    gap: 45px;
    justify-content: center;
    max-height: 80vh;
    overflow-y: auto;
}

button.remove-attribute {
  color: rgb(0, 0, 0);
  background-color: #f8d210;
  opacity: 0.6;
  font-size: 0.7rem;
  padding: 5px 15px;
}

button.add-attribute {
  color: rgb(0, 0, 0);
  background-color: #f8d210;
  opacity: 0.6;
  font-size: 0.7rem;
  padding: 5px 15px;
}

button.remove-item {
    color: rgb(255, 255, 255);
    background-color: #d92505;
    font-size: 0.7rem;
    padding: 3px 8px;
}

.inventory {
    list-style-type: square; /* square bullets for the list */
    padding-left: 20px;    
    margin: 10px 0;      
}

.inventory li {
    margin: 0px 0;      
    font-size: 0.7em;
}

.player {
    background-color: #333;
    border: 5px double #f72585;
    border-radius: 10px;
    padding: 15px;
    width: 295px;
    text-align: left;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.6);
    
}

.player-name {
    width: 100%;
    margin-bottom: 10px;
    padding: 5px;
    background-color: #222;
    color: #fff;
    border: none;
    font-family: inherit;
}

.player-icon {
  width: 50px;
  height: 50px;
  display: block;
  margin: 0 auto 10px;
}

.logo-icon {
  display: block;
  margin: 0 auto 10px;
  position: absolute;
  top: 10px;
  right: 1425px;
  width: 90px;
  height: auto;
  z-index: 10;
}

label {
    display: flex;
    justify-content: flex-start;
    margin-bottom: 10px;
    color: #f8d210;
    font-size: 0.8rem;
    align-items: center;
}

.stat-input {
    width: 50px;
    padding: 3px;
    font-size: 0.8rem;
    background-color: #222;
    color: white;
    border: none;
    font-family: inherit;
    margin-left: 3px;
}

.stat-button {
    font-size: 0.8em;
    width: 50px;
    height: 25px;
    margin: 0 2px;
    padding: 3px;
    cursor: pointer;
}

.fade-in-text {
  font-family: 'Press Start 2P';
  font-size: 45px;
  animation: fadeIn 2s;
  padding: 15px;
}

h2.fade-in-text {
    font-family: 'Press Start 2P';
    font-size: 9px;
    animation: fadeIn 5s;
    padding: 15px;
  }

  /* for animations */
@keyframes fadeIn {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

/* dice section next to the logo */
.dice-section {
  position: absolute;
  top: 20px;
  right: 1250px; /* adjust this value to control the spacing between the logo and dice section */
  color: white;
  font-size: 20px;
  font-family: 'Press Start 2P', cursive;
  display: flex;
  align-items: center;
}

.dice-button {
  background-color: #f72585;
  color: white;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
  font-size: 0.8rem;
  margin-left: 10px;
  transition: background-color 0.3s;
}

.dice-button:hover {
  background-color: #7209b7;
}

