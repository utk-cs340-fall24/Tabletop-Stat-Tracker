8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 545)     line-height: 1.5;
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 548)   .dice-number {
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 549)     font-size: 12px;
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 550)   }
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 551) 
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 552)   /* For webkit browsers (Chrome, Safari) */
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 553) .dropdown-menu::-webkit-scrollbar {
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 554)   width: 8px; /* Width of the scrollbar */
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 555) }
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 556) 
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 557) .dropdown-menu::-webkit-scrollbar-track {
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 558)   background: transparent; /* Background of the scrollbar track */
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 559) }
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 560) 
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 561) .dropdown-menu::-webkit-scrollbar-thumb {
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 562)   background-color: #888; /* Color of the scrollbar thumb */
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 563)   border-radius: 4px; /* Rounded corners */
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 564) }
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 565) 
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 566) .dropdown-menu::-webkit-scrollbar-thumb:hover {
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 567)   background-color: #555; /* Darker on hover */
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 568) }
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 569) 
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 570) /* Updated Dummy Card Styling to Match Player Card */
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 571) .dummy-card {
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 572)   background-color: #333;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 573)   border: 5px double #f72585;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 574)   border-radius: 10px;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 575)   padding: 15px;
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 576)   width: 300px;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 577)   text-align: left;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 578)   box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.6);
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 579)   max-height: 400px;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 580)   overflow: auto;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 581)   color: #fff;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 582)   font-family: 'Press Start 2P', cursive;
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 583) }
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 584) 
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 585) /* Dummy Card Header to Match Font Style */
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 586) .dummy-card h3 {
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 587)   font-size: 1rem;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 588)   color: #f8d210;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 589)   margin-bottom: 10px;
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 590) }
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 591) 
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 592) /* Dummy Card Attribute and Item Text Styling */
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 593) .dummy-card p {
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 594)   font-size: 0.8rem;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 595)   color: #fff;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 596)   margin: 8px 0;
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 597) }
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 598) 
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 599) /* Dummy Card Inner Sections for Attribute and Item Display */
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 600) .dummy-card .attribute, 
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 601) .dummy-card .item {
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 602)   padding: 3px 0;
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 603)   display: flex;
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 604)   justify-content: space-between;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 605)   font-size: 0.8rem;
734807c9 (Mike Lisenko 2024-10-28 15:33:24 -0400 606)   color: #f8d210;
8060cef8 (Mike Lisenko 2024-10-28 15:27:40 -0400 607) }
Binary file (standard input) matches
Binary file (standard input) matches
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400   1) @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400   2) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400   3) .vt323-regular {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400   4)   font-family: "VT323", monospace;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400   5)   font-weight: 400;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400   6)   font-style: normal;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400   7) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400   8) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400   9) * {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  10)     margin: 0;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  11)     padding: 0;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  12)     box-sizing: border-box;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  13) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  14) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  15) body {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  16)     background-color: #323131;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  17)     color: #fff;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  18)     font-family: 'Press Start 2P', cursive;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  19)     display: flex;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  20)     justify-content: center;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  21)     align-items: center;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  22)     height: 100vh;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  23)     position: relative;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  24) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  25) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  26) .container {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  27)     text-align: center;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  28) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  29) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  30) h1 {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  31)     color: #ffffff;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  32)     margin-bottom: 20px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  33) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  34) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  35) h2 {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  36)   color: #ffffff;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  37)   margin-bottom: 20px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  38)   font-size: 10px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  39) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  40) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  41) button {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  42)     font-family: inherit;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  43)     background-color: #f72585;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  44)     color: white;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  45)     border: none;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  46)     padding: 10px 20px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  47)     cursor: pointer;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  48)     font-size: 1rem;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  49)     margin-bottom: 20px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  50)     transition: background-color 0.3s;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  51) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  52) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  53) button:hover {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  54)     background-color: #7209b7;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  55) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  56) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  57) #players-container {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  58)     display: flex;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  59)     flex-wrap: wrap;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  60)     gap: 20px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  61)     justify-content: center;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  62)     max-height: 80vh;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  63)     overflow-y: auto;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  64) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  65) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  66) button.remove-attribute {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  67)   color: rgb(0, 0, 0);
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  68)   background-color: #f8d210;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  69)   opacity: 0.6;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  70)   font-size: 0.7rem;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  71)   padding: 5px 15px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  72) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  73) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  74) button.add-attribute {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  75)   color: rgb(0, 0, 0);
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  76)   background-color: #f8d210;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  77)   opacity: 0.6;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  78)   font-size: 0.7rem;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  79)   padding: 5px 15px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  80) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  81) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  82) button.remove-item {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  83)     color: rgb(0, 0, 0);
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  84)     background-color: #f8d210;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  85)     opacity: 0.6;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  86)     font-size: 0.7rem;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  87)     padding: 3px 10px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  88) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  89) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  90) .inventory {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  91)     list-style-type: disc; /* Use bullets for the list */
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  92)     padding-left: 20px;    /* Indent the list */
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  93)     margin: 10px 0;        /* Add some margin around the list */
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  94) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  95) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  96) .inventory li {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  97)     margin: 0px 0;         /* Adjusts spacing between list items */
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  98)     font-size: 0.7em;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400  99) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 100) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 101) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 102) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 103) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 104) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 105) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 106) .player {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 107)     background-color: #333;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 108)     border: 5px double #f72585;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 109)     border-radius: 10px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 110)     padding: 15px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 111)     width: 295px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 112)     text-align: left;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 113)     box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.6);
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 114) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 115) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 116) .player-name {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 117)     width: 100%;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 118)     margin-bottom: 10px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 119)     padding: 5px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 120)     background-color: #222;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 121)     color: #fff;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 122)     border: none;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 123)     font-family: inherit;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 124) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 125) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 126) .player-icon {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 127)   width: 50px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 128)   height: 50px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 129)   display: block;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 130)   margin: 0 auto 10px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 131) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 132) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 133) .logo-icon {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 134)   display: block;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 135)   margin: 0 auto 10px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 136)   position: absolute;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 137)   top: 10px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 138)   right: 1425px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 139)   width: 90px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 140)   height: auto;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 141)   z-index: 10;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 142) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 143) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 144) label {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 145)     display: flex;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 146)     justify-content: flex-start;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 147)     margin-bottom: 10px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 148)     color: #f8d210;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 149)     font-size: 0.8rem;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 150)     align-items: center;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 151) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 152) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 153) .stat-input {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 154)     width: 50px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 155)     padding: 3px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 156)     font-size: 0.8rem;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 157)     background-color: #222;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 158)     color: white;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 159)     border: none;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 160)     font-family: inherit;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 161)     margin-left: 3px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 162) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 163) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 164) .stat-button {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 165)     font-size: 0.8em;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 166)     width: 50px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 167)     height: 25px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 168)     margin: 0 2px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 169)     padding: 3px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 170)     cursor: pointer;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 171) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 172) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 173) .fade-in-text {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 174)   font-family: 'Press Start 2P';
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 175)   font-size: 45px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 176)   animation: fadeIn 2s;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 177)   padding: 15px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 178) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 179) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 180) h2.fade-in-text {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 181)     font-family: 'Press Start 2P';
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 182)     font-size: 9px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 183)     animation: fadeIn 5s;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 184)     padding: 15px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 185)   }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 186) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 187) @keyframes fadeIn {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 188)   0% { opacity: 0; }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 189)   100% { opacity: 1; }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 190) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 191) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 192) /* Dummy Card Styling - Matches the player card look */
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 193) .dummy-card {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 194)   width: 300px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 195)   background-color: #f5f5f5;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 196)   border: 2px solid #ccc;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 197)   border-radius: 8px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 198)   padding: 16px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 199)   margin: 8px auto;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 200)   font-family: 'VT323', monospace;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 201)   color: #333;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 202)   box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 203) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 204) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 205) /* Dummy Card Header */
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 206) .dummy-card h3 {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 207)   font-size: 1.5em;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 208)   margin-bottom: 8px;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 209)   color: #555;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 210) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 211) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 212) /* Dummy Card Text */
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 213) .dummy-card p {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 214)   font-size: 1.2em;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 215)   margin: 4px 0;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 216)   color: #444;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 217) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 218) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 219) /* Add padding for card content consistency */
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 220) .dummy-card .attribute, 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 221) .dummy-card .item {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 222)   padding: 4px 0;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 223)   display: flex;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 224)   align-items: center;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 225)   justify-content: space-between;
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 226) }
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 227) 
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 228) /* Remove icon/button spacing within dummy card */
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 229) .dummy-card button,
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 230) .dummy-card input {
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 231)   display: none; /* Hide editable fields if you want them to be read-only */
c2b0c653 (Mike Lisenko 2024-10-28 15:25:24 -0400 232) }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400   1) <!DOCTYPE html>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400   2) <html lang="en">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400   3) <head>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400   4)     <meta charset="UTF-8">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400   5)     <meta name="viewport" content="width=device-width, initial-scale=1.0">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400   6)     <title>Table-top Stat Tracker</title>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400   7)     <link rel="stylesheet" href="hostView_stylesheet2.css">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400   8)     <link rel="preconnect" href="https://fonts.googleapis.com">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400   9)     <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  10)     <link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  11)     <script src="dice-dropdown.js" defer></script> <!-- Here's the linked .js file you can use! only has dice stuff -->
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  12)     <script src="node_modules/dice-roller-parser/dist/index.js"></script>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  13) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  14) </head>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  15) <body>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  16)     <header class="header">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  17)         <img src="dndLogo.png" alt="DnD Logo" class="logo-icon"> 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  18)     </header>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  19) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  20)     <div class="container">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  21)         <div class="fade-in-text">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  22)             <p>Retro Roller Player View</p>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  23)         </div>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  24) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  25)         <h2 class="fade-in-text">Virtual Table-Top Stat Tracker</h2>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  26)         <div id="players-container"></div>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  27)     </div>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  28) 
0efbab40 (Mike Lisenko 2024-10-28 10:37:58 -0400  29)     <div id="dummyCardsContainer"></div>
0efbab40 (Mike Lisenko 2024-10-28 10:37:58 -0400  30) 
0efbab40 (Mike Lisenko 2024-10-28 10:37:58 -0400  31) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  32)     <!-- Popup for icon selection -->
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  33)     <div id="icon-popup" class="icon-popup">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  34)         <h3>Select Player Icon</h3>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  35)         <div class="icon-selection">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  36)             <img src="player_icon.png" alt="Player Icon 1" class="icon-option">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  37)             <img src="player_wizard.png" alt="Player Icon 2" class="icon-option">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  38)             <img src="knight.png" alt="Player Icon 3" class="icon-option">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  39)             <img src="wizard.png" alt="Player Icon 4" class="icon-option">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  40)             <!-- Add more icons as needed -->
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  41)         </div>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  42)         <button id="close-popup">Close</button>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  43)     </div>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  44) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  45)     <script>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  46) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  47) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  48)         // PostCard class
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  49)         class PostCard {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  50)             constructor(ip, name, attributes = {}, items = []) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  51)                 this.IP = ip;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  52)                 this.Name = name;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  53)                 this.Attributes = attributes;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  54)                 this.Items = items;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  55)             }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  56)         }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  57) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  58)         // Store all the dummy cards
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  59)         const dummyCards = {};
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  60) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  61)         // Creates a dummy player card
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  62)         function createDummyCard(postCard) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  63)             const cardId = postCard.IP; // Use IP as the id
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  64)             const cardContainer = document.getElementById('dummyCardsContainer');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  65) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  66)             // Check if card already exists
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  67)             if (!dummyCards[cardId]) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  68)                 const cardElement = document.createElement('div');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  69)                 cardElement.id = cardId;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  70)                 cardElement.className = 'dummy-card';
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  71)                 cardElement.innerHTML = `
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  72)                     <h3>${postCard.Name}</h3>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  73)                     <p>IP: ${postCard.IP}</p>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  74)                     <p>Attributes: ${JSON.stringify(postCard.Attributes)}</p>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  75)                     <p>Items: ${JSON.stringify(postCard.Items)}</p>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  76)                 `;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  77)                 cardContainer.appendChild(cardElement);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  78)                 dummyCards[cardId] = cardElement; // Store reference
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  79)             }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  80)         }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  81) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  82)         // Updates dummy player card
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  83)         function updateDummyCard(postCard) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  84)             const cardId = postCard.IP;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  85)             const cardElement = dummyCards[cardId];
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  86) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  87)             if (cardElement) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  88)                 cardElement.innerHTML = `
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  89)                     <h3>${postCard.Name}</h3>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  90)                     <p>IP: ${postCard.IP}</p>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  91)                     <p>Attributes: ${JSON.stringify(postCard.Attributes)}</p>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  92)                     <p>Items: ${JSON.stringify(postCard.Items)}</p>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  93)                 `;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  94)             }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  95)         }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  96) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  97)         // Destroys dummy player card
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  98)         function destroyDummyCard(ip) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400  99)             const cardElement = dummyCards[ip];
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 100) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 101)             if (cardElement) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 102)                 cardElement.remove(); // Remove from the DOM
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 103)                 delete dummyCards[ip]; // Remove from the reference
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 104)             }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 105)         }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 106) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 107) //-------------------------------------------------------------------------------------------------------------------------//
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 108) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 109)         const playerContainer = document.getElementById('players-container');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 110)         const iconPopup = document.getElementById('icon-popup');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 111)         let currentPlayerIcon = null; // Track the player icon currently being updated
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 112) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 113)         let players = [];
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 114)         let currentPlayerIndex = -1;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 115) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 116)         document.addEventListener("DOMContentLoaded", () => {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 117)             const incrementButtons = document.querySelectorAll(".increment");
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 118)             const decrementButtons = document.querySelectorAll(".decrement");
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 119)             const rollButton = document.querySelector(".roll-button");
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 120)             const resultDisplay = document.getElementById("roll-result");
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 121) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 122)             // Add event listeners for increment and decrement buttons
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 123)             incrementButtons.forEach(button => {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 124)                 button.addEventListener("click", () => {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 125)                     const quantitySpan = button.parentElement.querySelector("[data-quantity]");
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 126)                     let quantity = parseInt(quantitySpan.textContent);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 127)                     quantitySpan.textContent = quantity + 1;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 128)                 });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 129)             });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 130) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 131)             decrementButtons.forEach(button => {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 132)                 button.addEventListener("click", () => {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 133)                     const quantitySpan = button.parentElement.querySelector("[data-quantity]");
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 134)                     let quantity = parseInt(quantitySpan.textContent);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 135)                     if (quantity > 0) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 136)                         quantitySpan.textContent = quantity - 1;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 137)                     }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 138)                 });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 139)             });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 140) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 141)         // Roll button click event
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 142)         rollButton.addEventListener("click", () => {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 143)             
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 144)             const diceQuantities = {};
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 145)             const manualInput = document.getElementById("dice-input").value;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 146) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 147)             // Collect quantities for each type of die
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 148)             document.querySelectorAll(".dice-type").forEach(dice => {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 149)                 const diceValue = dice.getAttribute("data-dice");
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 150)                 const quantity = parseInt(dice.querySelector("[data-quantity]").textContent);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 151)                 if (quantity > 0) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 152)                     diceQuantities[diceValue] = quantity; // Store quantity for the corresponding die type
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 153)                 }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 154)             });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 155) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 156)             // Validation check: Either quantities or manual input must be provided, but not both
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 157)             if (Object.keys(diceQuantities).length > 0 && manualInput) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 158)                 rollResult.textContent = "Please use either the dice selection or manual input, not both.";
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 159)                 return; // Exit the function if both are provided
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 160)             }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 161) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 162)             // Call the rollDice function with the collected quantities and manual input
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 163)             if(manualInput) rollDice(manualInput);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 164)             else if(Object.keys(diceQuantities).length > 0) rollDice(diceQuantities);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 165)             else rollResult.textContent = "No dice selected or input provided.";
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 166)         });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 167)     });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 168)         // Function to handle dice rolling
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 169)         function rollDice(input) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 170)             //const input = document.getElementById('dice-input').value;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 171)             if (typeof input == "string") {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 172)                 const regex = /^(\d+)d(\d+)$/; // Regular expression to match dice format (e.g., 4d20)
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 173)                 const match = input.match(regex);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 174)                 if (match) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 175)                     const numDice = parseInt(match[1]);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 176)                     const diceType = parseInt(match[2]);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 177)                     let total = 0;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 178)                     const results = [];
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 179)                     for (let i = 0; i < numDice; i++) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 180)                         const roll = Math.floor(Math.random() * diceType) + 1;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 181)                         results.push(roll);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 182)                         total += roll;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 183)                     }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 184)                     rollResult.textContent = `Total: ${total}\nRolls:\n${results.join(', ')}`; // Display results
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 185)                 } else {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 186)                     rollResult.textContent = 'Invalid input! Please use format like 4d20.';
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 187)                 }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 188)             }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 189)             else if (typeof input == "object") {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 190)                 let total = 0;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 191)                 const allResults = [];
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 192)                 for (const [diceType, quantity] of Object.entries(input)) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 193)                     const diceResults = [];
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 194)                     for (let i = 0; i < quantity; i++) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 195)                         const roll = Math.floor(Math.random() * parseInt(diceType)) + 1;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 196)                         diceResults.push(roll);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 197)                         total += roll;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 198)                     }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 199)                     allResults.push(`${quantity}d${diceType}: [${diceResults.join(', ')}]`);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 200)                 }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 201)                 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 202)                 rollResult.textContent = `Total: ${total}\nRolls:\n${allResults.join('\n')}`;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 203)             }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 204)             else {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 205)                 rollResult.textContent = 'Unable to process roll. Try again.';
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 206)             }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 207)         }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 208) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 209) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 210)         // Function to open the icon popup
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 211)         function openIconPopup(playerIcon) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 212)             currentPlayerIcon = playerIcon; // Store the current player's icon to update
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 213)             iconPopup.style.display = 'block';
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 214)         }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 215) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 216)         // Event listener for icon selection
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 217)         const iconOptions = document.querySelectorAll('.icon-option');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 218)         iconOptions.forEach(icon => {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 219)             icon.addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 220)                 if (currentPlayerIcon) {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 221)                     currentPlayerIcon.src = this.src; // Update the player's icon
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 222)                 }
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 223)                 iconPopup.style.display = 'none'; // Close the popup
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 224)             });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 225)         });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 226) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 227)         // Function to add a new player
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 228)  
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 229)             const playerDiv = document.createElement('div');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 230)             playerDiv.className = 'player';
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 231) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 232)             playerDiv.innerHTML = `
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 233)                 <img src="player_icon.png" alt="Player Icon" class="player-icon" style="filter: hue-rotate(${Math.floor(Math.random() * 570)}deg)">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 234)                 <input type="text" placeholder="Player Name" class="player-name">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 235)                 <h3 class="attributes-h3">Attributes</h3>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 236)                 <div class="stat-container attributes-container"></div>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 237)                 <button class="add-attribute">Add Attribute</button>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 238) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 239)                 <!-- Inventory section -->
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 240)                 <h3>Inventory</h3>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 241)                 <div class="stat-container inventory-container"></div>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 242)                 <button class="add-item">Add Inventory</button>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 243) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 244)                 <button class="remove-player">Remove Player</button>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 245)                 <!-- Button to log player data -->
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 246)             `;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 247) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 248)             playerContainer.appendChild(playerDiv);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 249) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 250)             // Make the player icon clickable
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 251)             const playerIcon = playerDiv.querySelector('.player-icon');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 252)             playerIcon.addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 253)                 openIconPopup(playerIcon); // Open the popup for this specific player's icon
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 254)             });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 255) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 256)             // Handle attribute addition
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 257)             const addAttributeBtn = playerDiv.querySelector('.add-attribute');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 258)             const attributesContainer = playerDiv.querySelector('.attributes-container');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 259)             addAttributeBtn.addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 260)                 const newAttribute = document.createElement('div');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 261)                 newAttribute.className = 'stat-container';
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 262)                 newAttribute.innerHTML = `
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 263)                     <label class="attribute">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 264)                         <button class="remove-attribute-x">X</button>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 265)                         <input type="text" class="attribute-name" placeholder="Attribute Name">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 266)                         <button class="stat-button decrement">-</button>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 267)                         <input type="number" class="stat-input" value="0">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 268)                         <button class="stat-button increment">+</button>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 269)                     </label>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 270)                 `;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 271)                 const statInput = newAttribute.querySelector('.stat-input');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 272)                 newAttribute.querySelector('.increment').addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 273)                     statInput.value = parseInt(statInput.value) + 1;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 274)                 });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 275)                 newAttribute.querySelector('.decrement').addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 276)                     statInput.value = parseInt(statInput.value) - 1;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 277)                 });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 278)                 newAttribute.querySelector('.remove-attribute-x').addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 279)                     newAttribute.remove();
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 280)                 });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 281) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 282)                 attributesContainer.appendChild(newAttribute);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 283)             });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 284) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 285)             // Handle inventory addition (similar to attributes)
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 286)             const addItemBtn = playerDiv.querySelector('.add-item');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 287)             const inventoryContainer = playerDiv.querySelector('.inventory-container');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 288)             addItemBtn.addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 289)                 const newItem = document.createElement('div');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 290)                 newItem.className = 'stat-container';
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 291)                 newItem.innerHTML = `
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 292)                     <label class="item">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 293)                         <button class="remove-item-x">X</button>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 294)                         <input type="text" class="item-name" placeholder="Item Name">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 295)                         <button class="stat-button decrement">-</button>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 296)                         <input type="number" class="stat-input" value="0">
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 297)                         <button class="stat-button increment">+</button>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 298)                     </label>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 299)                 `;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 300)                 const itemInput = newItem.querySelector('.stat-input');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 301)                 newItem.querySelector('.increment').addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 302)                     itemInput.value = parseInt(itemInput.value) + 1;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 303)                 });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 304)                 newItem.querySelector('.decrement').addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 305)                     itemInput.value = parseInt(itemInput.value) - 1;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 306)                 });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 307)                 newItem.querySelector('.remove-item-x').addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 308)                     newItem.remove();
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 309)                 });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 310) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 311)                 inventoryContainer.appendChild(newItem);
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 312)             });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 313) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 314)             // Handle player removal
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 315)             const removePlayerBtn = playerDiv.querySelector('.remove-player');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 316)             removePlayerBtn.addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 317)                 playerDiv.remove();
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 318)             });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 319) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 320) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 321)             // Update player data functionality
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 322)             const submitPlayerBtn = playerDiv.querySelector('.submit-player');
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 323)             submitPlayerBtn.addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 324)                 const playerName = playerDiv.querySelector('.player-name').value;
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 325)                 const attributes = [...attributesContainer.querySelectorAll('.attribute')].map(attr => ({
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 326)                 name: attr.querySelector('.attribute-name').value,
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 327)                 value: attr.querySelector('.stat-input').value
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 328)                 }));
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 329)         
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 330)                 // Use '.item' class for inventory items
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 331)                 const inventory = [...inventoryContainer.querySelectorAll('.item')].map(item => ({
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 332)                     name: item.querySelector('.item-name').value,
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 333)                     value: item.querySelector('.stat-input').value
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 334) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 335)                 }));
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 336) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 337)                 //Log player data to the console
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 338)                 console.log({
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 339)                     playerName,
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 340)                     attributes,
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 341)                     inventory
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 342)                 });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 343)             });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 344) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 345)     
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 346) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 347)         // Close the icon popup
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 348)         document.getElementById('close-popup').addEventListener('click', function() {
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 349)             iconPopup.style.display = 'none';
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 350)         });
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 351) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 352) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 353) 
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 354)     </script>
27137787 (Mike Lisenko 2024-10-27 18:53:50 -0400 355) </body>
0efbab40 (Mike Lisenko 2024-10-28 10:37:58 -0400 356) </html>
