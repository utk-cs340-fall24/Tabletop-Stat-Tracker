ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400   1) class Item {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400   2)     constructor(name, count = 0, description = '') {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400   3)         this.name = name;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400   4)         this.count = count;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400   5)         this.description = description;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400   6)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400   7) }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400   8) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400   9) class Player {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  10)     constructor(name, health) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  11)         this.name = name;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  12)         this.health = health;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  13)         this.healthCap = health;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  14)         this.deathSaveFails = 0;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  15)         this.deathSaveSuccesses = 0;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  16)         this.inventory = new Map();
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  17)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  18) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  19)     // General functions
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  20)     namePrint() {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  21)         return this.name;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  22)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  23) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  24)     healthPrint() {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  25)         return this.health;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  26)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  27) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  28)     playerPrint() {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  29)         console.log(`Name: ${this.namePrint()}`);
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  30)         console.log(`Health: ${this.healthPrint()}`);
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  31)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  32) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  33)     // Health functions
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  34)     healthIncrement(a) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  35)         if (a <= 0) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  36)             console.error("Not a valid healing counter");
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  37)             return;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  38)         }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  39) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  40)         this.health += a;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  41)         if (this.health > this.healthCap) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  42)             console.log("Healed past cap.");
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  43)             this.health = this.healthCap;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  44)         }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  45)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  46) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  47)     healthDecrement(a) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  48)         if (a <= 0) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  49)             console.error("Not a valid damage counter");
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  50)             return;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  51)         }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  52) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  53)         this.health -= a;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  54)         if (this.health < 0) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  55)             console.log("Player is knocked.... begin death saves >:)");
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  56)         }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  57)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  58) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  59)     deathFail() {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  60)         this.deathSaveFails++;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  61)         if (this.deathSaveFails >= 3) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  62)             console.log("YOU ARE DEAD!!!");
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  63)         }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  64)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  65) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  66)     deathSuccess() {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  67)         this.deathSaveSuccesses++;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  68)         if (this.deathSaveSuccesses >= 3) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  69)             console.log("YOU ARE BACK UP! DON'T WASTE THIS CHANCE");
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  70)         }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  71)         this.health = 1;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  72)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  73) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  74)     // Inventory functions
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  75)     inventoryInsert(name) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  76)         if (this.inventory.has(name)) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  77)             const item = this.inventory.get(name);
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  78)             item.count++;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  79)         } else {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  80)             const description = prompt("Enter a description: ");
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  81)             const newItem = new Item(name, 1, description);
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  82)             this.inventory.set(name, newItem);
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  83)         }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  84)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  85) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  86)     inventoryRemove(name) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  87)         if (this.inventory.has(name)) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  88)             const item = this.inventory.get(name);
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  89)             item.count--;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  90) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  91)             if (item.count === 0) {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  92)                 this.inventory.delete(name);
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  93)             }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  94)         } else {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  95)             console.log("You don't even have that");
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  96)         }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  97)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  98) 
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400  99)     inventoryPrint() {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400 100)         let i = 1;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400 101)         this.inventory.forEach((item) => {
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400 102)             console.log(`${i}. ${item.name} x${item.count}`);
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400 103)             i++;
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400 104)         });
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400 105)     }
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 106) 
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 107)     inventoryPrintWithDescription() {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 108)         let i = 1;
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 109)         this.inventory.forEach((item) => {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 110)             console.log(`${i}. ${item.name} x${item.count} - ${item.description}`);
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 111)             i++;
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 112)         });
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 113)     }
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 114) 
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 115)     inventoryRemoveMultiple(name, count) {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 116)         if (this.inventory.has(name)) {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 117)             const item = this.inventory.get(name);
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 118)             if (item.count >= count) {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 119)                 item.count -= count;
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 120)                 if (item.count === 0) {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 121)                     this.inventory.delete(name);
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 122)                 }
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 123)             } else {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 124)                 console.log(`Not enough of ${name} to remove`);
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 125)             }
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 126)         } else {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 127)             console.log("You don't even have that");
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 128)         }
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 129)     }
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 130)     
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 131)     inventoryAdd(name, count) {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 132)         if (count <= 0) {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 133)             console.error("Count must be greater than zero.");
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 134)             return;
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 135)         }
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 136)     
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 137)         if (this.inventory.has(name)) {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 138)             const item = this.inventory.get(name);
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 139)             item.count += count; // Increase count by the specified amount
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 140)         } else {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 141)             const description = prompt("Enter a description: ");
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 142)             const newItem = new Item(name, count, description); // Create new item with the given count
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 143)             this.inventory.set(name, newItem);
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 144)         }
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 145)     }
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 146)     
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 147) 
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 148)     inventoryClear() {
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 149)         this.inventory.clear();
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 150)         console.log("Inventory cleared.");
f3207931 (McKinley Harmon 2024-10-10 19:13:10 -0400 151)     }
ba3e0834 (McKinley Harmon 2024-10-07 14:12:40 -0400 152) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  12)     <script src="node_modules/dice-roller-parser/dist/index.js"></script>
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  19)             
4c335ff2 (McKinley Harmon 2024-10-14 20:46:15 -0400  25)                        <input type="text" id="dice-input" name="dice-input" placeholder="ex. 4d20">
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  26)                         <script>
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  27)                             //	Creates a new instance of the DiceRoller class
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  28)                             const roller = new DiceRoller();
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  29)                               // Add an event listener to capture the user input when it's entered
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  30)                             const diceInput = document.getElementById('dice-input');
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  31)                             let userInput;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  32) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  33)                             diceInput.addEventListener('input', function(event) {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  34)                             userInput = event.target.value; //            
c580f07d (McKinley Harmon 2024-10-14 22:04:31 -0400  35)                             //	Rolls 2 d20 dice and keeps the value of the highest
c580f07d (McKinley Harmon 2024-10-14 22:04:31 -0400  36)                              const parsedInput = roller.parse(userInput);
c580f07d (McKinley Harmon 2024-10-14 22:04:31 -0400  37)  
c580f07d (McKinley Harmon 2024-10-14 22:04:31 -0400  38)                              //	Print out a re-constructed input string
c580f07d (McKinley Harmon 2024-10-14 22:04:31 -0400  39)                              printParsedInput(parsedInput);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  40)                             });
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  41)                         </script>
4c335ff2 (McKinley Harmon 2024-10-14 20:46:15 -0400  43)                     <h4>Roll: </h4> <!--  display roll results here somehow? -->                    
dd5a423b (McKinley Harmon 2024-10-14 20:41:07 -0400  48) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  1) {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  2)   "name": "frontEnd",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  3)   "lockfileVersion": 3,
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  4)   "requires": true,
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  5)   "packages": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  6)     "node_modules/dice-roller-parser": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  7)       "version": "0.1.8",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  8)       "resolved": "https://registry.npmjs.org/dice-roller-parser/-/dice-roller-parser-0.1.8.tgz",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  9)       "integrity": "sha512-/UYDWMX1FHU6RR3iZGfexKlqyBJXSPuHPkvvpZ8k3QVjaXVc56W5GeLc/0bf9qLZTn1YdVFrIBLzvBt/9UHoNw=="
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 10)     }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 11)   }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 12) }






//!!!!!!! Below this point is open-source stuff I added for dice roller functionality.
I wasn't 100% sure if I needed to include it so im leaving it here cut off from stuff I
I did write.
//!!!!!!!








72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  1) MIT License
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  2) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  3) Copyright (c) 2016 Ben Morton
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  4) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  5) Permission is hereby granted, free of charge, to any person obtaining a copy
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  6) of this software and associated documentation files (the "Software"), to deal
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  7) in the Software without restriction, including without limitation the rights
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  8) to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  9) copies of the Software, and to permit persons to whom the Software is
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 10) furnished to do so, subject to the following conditions:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 11) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 12) The above copyright notice and this permission notice shall be included in all
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 13) copies or substantial portions of the Software.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 14) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 15) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 16) IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 17) FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 18) AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 19) LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 20) OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 21) SOFTWARE.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   1) # Dice Roller & Parser
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   2) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   3) This dice roller is a string parser that returns an object containing the component parts of the dice roll. It supports the full [Roll20 Dice Specification](https://roll20.zendesk.com/hc/en-us/articles/360037773133-Dice-Reference#DiceReference-Roll20DiceSpecification). It uses a [pegjs](https://github.com/pegjs/pegjs) grammar to create a [representation of the dice roll format](#parsed-roll-output). This can then be converted into a simple number value, or to a [complex object](#roll-result-output) used to display the full roll details.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   4) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   5) ## Quickstart
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   6) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   7) Install the library using:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   8) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   9) ```bash
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  10) npm install dice-roller-parser
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  11) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  12) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  13) Once installed, simply load the library, either in the browser:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  14) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  15) ```html
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  16) <script src="node_modules/dice-roller-parser/dist/index.js"></script>
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  17) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  18) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  19) Or in node:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  20) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  21) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  22) import { DiceRoller } from "dice-roller-parser";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  23) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  24) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  25) Then create a new instance of the [`DiceRoller`](#DiceRoller) class, and use it to perform some dice rolls.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  26) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  27) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  28) const diceRoller = new DiceRoller();
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  29) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  30) //	Returns the total rolled value
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  31) const roll = diceRoller.rollValue("2d20kh1");
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  32) console.log(roll);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  33) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  34) //	Returns an object representing the dice roll, use to display the component parts of the roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  35) const rollObject = diceRoller.roll("2d20kh1");
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  36) console.log(rollObject.value);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  37) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  38) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  39) ## Usage
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  40) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  41) This library exposes two classes, a [`DiceRoller`](#DiceRoller) and a [`DiscordRollRenderer`](#DiscordRollRenderer).
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  42) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  43) ### `DiceRoller`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  44) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  45) The `DiceRoller` class manages parsing of a dice string and performing rolls based upon the result.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  46) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  47) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  48) //	Creates a new instance of the DiceRoller class
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  49) const roller = new DiceRoller();
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  50) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  51) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  52) #### Constructor options
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  53) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  54) The default constructor uses `Math.random` and applies a maximum number of rolls per die of 1000. These can be specified using the following constructor overloads.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  55) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  56) ##### `DiceRoller(GeneratorFunction)`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  57) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  58) You can specify a function to be used as the random number generator by the dice roller. This function should be of the type `() => number` and return a number between 0 and 1. By default, it uses the built-in `Math.random` method.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  59) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  60) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  61) //	Default constructor using Math.random
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  62) const roller = new DiceRoller();
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  63) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  64) //	Uses a custom random generator that always returns 0.5
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  65) const roller = new DiceRoller(() => 0.5);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  66) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  67) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  68) This can be read or modified using the `randFunction` property.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  69) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  70) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  71) roller.randFunction = () => 0.5;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  72) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  73) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  74) ##### `DiceRoller(GeneratorFunction, MaxRollsPerDie)`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  75) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  76) To prevent attempting to parse very large numbers of die rolls, a maximum number of rolls for a die can be specified. The default value is set to 1000.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  77) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  78) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  79) //	Uses the default constructor with a limit of 100 rolls per die
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  80) const roller = new DiceRoller(null, 100);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  81) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  82) //	Uses a custom random generator that always returns 0.5, and a limit of 10 rolls per die
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  83) const roller = new DiceRoller(() => 0.5, 10);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  84) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  85) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  86) This can be read or modified using the `maxRollCount` property.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  87) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  88) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  89) roller.maxRollCount = 75;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  90) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  91) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  92) #### Class Usage
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  93) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  94) Once the `DiceRoller` class has been constructed, there are three options for performing a dice roll:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  95) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  96) -   Getting a roll result directly
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  97) -   Generate an object to represent the dice roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  98) -   Just parse the input and add your own rolling logic
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  99) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 100) ##### Getting a direct roll result
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 101) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 102) The `rollValue` method takes a dice string input, parses it, performs a roll and returns the calculated number value result.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 103) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 104) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 105) //	Rolls 2 d20 dice and keeps the value of the highest
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 106) const roll = roller.rollValue("2d20kh1");
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 107) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 108) //	Prints out the numeric value result
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 109) console.log(roll);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 110) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 111) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 112) ##### Generate an object representing the dice roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 113) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 114) The `roll` method takes a dice string input, parses it, performs a roll and then returns an object that represents the roll. Using the roll objects, you can build your own roll display functionality, rather than just outputting the final value.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 115) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 116) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 117) //	Rolls 2 d20 dice and keeps the value of the highest
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 118) const roll = roller.roll("2d20kh1");
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 119) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 120) //	Print out the full roll breakdown
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 121) printDiceRoll(roll);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 122) //	Prints out the numeric value result
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 123) console.log(`Final roll value: ${roll.Value}`);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 124) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 125) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 126) See the [roll result output](#roll-result-output) in the [output types](#output-types) section below for more details on the returned object.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 127) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 128) ##### Just parse the value
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 129) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 130) The `parse` method takes a dice string input, parses it and returns a representation of the parsed input. This can either be used to perform a dice roll or re-construct the original input. The `rollParsed` method takes this parsed result as an input, performs the roll and returns the same output as from the [`roll`](#generate-an-object-representing-the-dice-roll) method.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 131) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 132) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 133) //	Rolls 2 d20 dice and keeps the value of the highest
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 134) const parsedInput = roller.parse("2d20kh1");
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 135) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 136) //	Print out a re-constructed input string
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 137) printParsedInput(parsedInput);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 138) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 139) //	Run the roller on the parsed object
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 140) const roll = roller.rollParsed(parsedInput);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 141) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 142) //	Print out the full roll breakdown
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 143) printDiceRoll(roll);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 144) //	Print out the numeric value result
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 145) console.log(`Final roll value: ${roll.Value}`);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 146) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 147) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 148) See the [parsed roll output](#parsed-roll-output) in the [output types](#output-types) section below for more details on the returned object.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 149) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 150) ### `DiscordRollRenderer`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 151) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 152) The `DiscordRollRenderer` class is an example renderer class that takes a rolled input represented by a [`RollBase`](#RollBase) object and renders it to a string in a markdown format, compatible with Discord.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 153) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 154) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 155) //	Creates a new instance of the DiceRoller class
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 156) const renderer = new DiscordRollRenderer();
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 157) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 158) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 159) #### Class Usage
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 160) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 161) The `DiscordRollRenderer` exposes a single `render` method with a single parameter, the [`RollBase`](#RollBase) object to render, and returns the rendered string.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 162) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 163) ```javascript
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 164) //	Rolls 2 d20 dice and keeps the value of the highest
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 165) const roll = roller.rollValue("2d20kh1");
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 166) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 167) //	Get the formatted string
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 168) const render = renderer.render(roll);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 169) console.log(render);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 170) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 171) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 172) ## Development
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 173) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 174) To develop this library, simply clone the repository, run an install:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 175) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 176) ```bash
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 177) npm install
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 178) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 179) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 180) Then do a build:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 181) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 182) ```bash
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 183) npm run build
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 184) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 185) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 186) This does four things:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 187) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 188) ```bash
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 189) # Clean any existing builds
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 190) npm run clean
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 191) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 192) # Build the dice grammer
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 193) npx pegjs src/diceroll.pegjs
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 194) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 195) # Run tslint against the project
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 196) tslint -c tslint.json --project tsconfig.json
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 197) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 198) # Then run webpack to build and package everything up nicely
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 199) webpack
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 200) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 201) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 202) To run the test suite, use:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 203) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 204) ```bash
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 205) npm run test
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 206) ```
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 207) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 208) That's all there is to it!
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 209) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 210) ## Output Types
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 211) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 212) The following object types are output from the [`DiceRoller`](#DiceRoller) class, and are available as interfaces for typescript users.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 213) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 214) ### Roll Result Output
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 215) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 216) The object returned by a roll result is made up of the following types.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 217) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 218) #### `RollBase`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 219) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 220) The base class for all die rolls, extended based upon the type property.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 221) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 222) | Property | Type                    | Description                                                         |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 223) | -------- | ----------------------- | ------------------------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 224) | success  | `boolean`               | Was the roll a success, for target number rolls. Example: `3d6 > 3` |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 225) | type     | [`RollType`](#RollType) | The type of roll that this object represents.                       |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 226) | valid    | `boolean`               | Is the roll still valid, and included in calculations.              |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 227) | value    | `number`                | The rolled or calculated value of this roll.                        |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 228) | label    | `string`                | The display label for this roll. This property is optional.         |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 229) | order    | `number`                | A property used to maintain ordering of dice rolls within groups.   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 230) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 231) #### `RollType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 232) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 233) An enum of the valid types of roll. The possible values are:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 234) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 235) -   `"number"`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 236) -   [`"diceexpressionroll"`](#DiceExpressionRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 237) -   [`"expressionroll"`](#ExpressionRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 238) -   [`"mathfunction"`](#MathFunctionRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 239) -   [`"grouproll"`](#GroupRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 240) -   `"fate"`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 241) -   [`"die"`](#DiceRollResult)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 242) -   [`"roll"`](#DieRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 243) -   [`"fateroll"`](#FateDieRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 244) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 245) #### `GroupedRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 246) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 247) An intermediate interface extended for groups of dice. This interface extends [`RollBase`](#RollBase).
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 248) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 249) | Property | Type                               | Description                               |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 250) | -------- | ---------------------------------- | ----------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 251) | dice     | `Array<`[`RollBase`](#RollBase)`>` | The rolls included as part of this group. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 252) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 253) #### `DiceExpressionRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 254) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 255) A representation of a dice expression. This interface extends [`GroupedRoll`](#GroupedRoll).
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 256) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 257) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 258) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 259) > `2d20 + 6d6`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 260) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 261) | Property | Type                                                           | Description                                   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 262) | -------- | -------------------------------------------------------------- | --------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 263) | type     | `"diceexpressionroll"`                                         | The type of roll that this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 264) | ops      | `Array<`[`DiceGroupMathOperation`](#DiceGroupMathOperation)`>` | The operations to perform on the rolls.       |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 265) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 266) #### `ExpressionRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 267) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 268) A representation of a mathematic expression. This interface extends [`GroupedRoll`](#GroupedRoll).
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 269) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 270) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 271) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 272) > `20 * 17`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 273) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 274) | Property | Type                                         | Description                                   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 275) | -------- | -------------------------------------------- | --------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 276) | type     | `"expressionroll"`                           | The type of roll that this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 277) | ops      | `Array<`[`MathOperation`](#MathOperation)`>` | The operations to perform on the rolls.       |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 278) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 279) #### `MathFunctionRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 280) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 281) A representation of a mathematic function. This interface extends [`RollBase`](#RollBase).
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 282) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 283) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 284) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 285) > `floor(20 / 17)`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 286) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 287) | Property | Type                            | Description                                       |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 288) | -------- | ------------------------------- | ------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 289) | type     | `"expressionfunc"`              | The type of roll that this object represents.     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 290) | op       | [`MathFunction`](#MathFunction) | The operations to perform on the rolls.           |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 291) | expr     | [`RollBase`](#RollBase)         | The expression that the function is applied upon. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 292) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 293) #### `GroupRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 294) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 295) A representation of a group of rolls
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 296) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 297) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 298) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 299) > {4d6,3d6}. This interface extends [`GroupedRoll`](#GroupedRoll).
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 300) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 301) | Property | Type          | Description                                   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 302) | -------- | ------------- | --------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 303) | type     | `"grouproll"` | The type of roll that this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 304) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 305) #### `DiceRollResult`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 306) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 307) The rolled result of a group of dice. This interface extends [`RollBase`](#RollBase).
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 308) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 309) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 310) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 311) > `6d20`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 312) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 313) | Property | Type                            | Description                                   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 314) | -------- | ------------------------------- | --------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 315) | die      | [`RollBase`](#RollBase)         | The die this result represents.               |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 316) | type     | `"die"`                         | The type of roll that this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 317) | rolls    | [`DieRollBase`](#DieRollBase)[] | Each roll of the die.                         |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 318) | count    | [`RollBase`](#RollBase)         | The number of rolls of the die.               |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 319) | matched  | `boolean`                       | Whether this is a match result.               |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 320) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 321) #### `DieRollBase`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 322) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 323) An intermediate interface extended for individual die rolls (see below). This interface extends [`RollBase`](#RollBase).
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 324) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 325) | Property | Type      | Description                   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 326) | -------- | --------- | ----------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 327) | roll     | `number`  | The rolled result of the die. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 328) | matched  | `boolean` | Whether this roll is a match. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 329) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 330) #### `DieRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 331) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 332) A roll on a regular die. This interface extends [`DieRollBase`](#DieRollBase).
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 333) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 334) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 335) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 336) > `d20`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 337) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 338) | Property | Type                            | Description                                                    |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 339) | -------- | ------------------------------- | -------------------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 340) | die      | `number`                        | The die number to be rolled.                                   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 341) | type     | `"roll"`                        | The type of roll that this object represents.                  |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 342) | critical | [`CriticalType`](#CriticalType) | If this role is a critical success or failure (for rendering). |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 343) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 344) #### `FateDieRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 345) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 346) A roll on a fate die. This interface extends [`DieRollBase`](#DieRollBase).
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 347) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 348) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 349) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 350) > `dF`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 351) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 352) | Property | Type         | Description                                   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 353) | -------- | ------------ | --------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 354) | type     | `"fateroll"` | The type of roll that this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 355) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 356) ### Parsed Roll Output
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 357) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 358) The following interfaces are exposed by the library as a reresentation of the parsed input string. The response from the `parse` method is a `RootType` object and could be any of the interfaces that extend it.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 359) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 360) #### `ParsedObjectType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 361) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 362) An enum of the valid types of roll. The possible values are:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 363) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 364) -   [`"number"`](#NumberType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 365) -   [`"inline"`](#InlineExpression)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 366) -   [`"success"`](#SuccessFailureCritModType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 367) -   [`"failure"`](#SuccessFailureCritModType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 368) -   [`"crit"`](#SuccessFailureCritModType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 369) -   [`"critfail"`](#SuccessFailureCritModType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 370) -   [`"match"`](#MatchModType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 371) -   [`"keep"`](#KeepDropModType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 372) -   [`"drop"`](#KeepDropModType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 373) -   [`"group"`](#GroupedRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 374) -   [`"diceExpression"`](#RollExpressionType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 375) -   [`"sort"`](#SortRollType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 376) -   [`"explode"`](#ReRollMod)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 377) -   [`"compound"`](#ReRollMod)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 378) -   [`"penetrate"`](#ReRollMod)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 379) -   [`"reroll"`](#ReRollMod)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 380) -   [`"rerollOnce"`](#ReRollMod)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 381) -   [`"target"`](#TargetMod)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 382) -   [`"die"`](#DiceRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 383) -   [`"fate"`](#FateExpr)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 384) -   [`"expression"`](#MathExpression)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 385) -   [`"math"`](#MathType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 386) -   [`"mathfunction"`](#MathFunctionExpression)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 387) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 388) #### `ParsedType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 389) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 390) This is the base interface for all parsed types.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 391) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 392) | Property | Type     | Description                                     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 393) | -------- | -------- | ----------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 394) | type     | `string` | The type of parsed item this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 395) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 396) #### `RootType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 397) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 398) This is the base interface for a subset of parsed types, only those that can be the root type. This object extends the [`ParsedType`](#ParsedType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 399) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 400) | Property | Type      | Description                                                       |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 401) | -------- | --------- | ----------------------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 402) | label?   | `string`  | The text label attached to this roll. This property is optional.  |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 403) | root     | `boolean` | A boolean flag to indicate if this is the root of the parse tree. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 404) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 405) #### `NumberType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 406) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 407) This object represents a single number in the input. This object extends the [`RootType`](#RootType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 408) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 409) | Property | Type       | Description                                     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 410) | -------- | ---------- | ----------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 411) | type     | `"number"` | The type of parsed item this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 412) | value    | `number`   | The value of the number.                        |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 413) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 414) #### `InlineExpression`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 415) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 416) This object represents an inline dice expression within a string, wrapped in double square brackets. This object extends the [`RootType`](#RootType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 417) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 418) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 419) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 420) > `I want to roll [[2d20]] dice`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 421) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 422) | Property | Type                        | Description                                          |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 423) | -------- | --------------------------- | ---------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 424) | type     | `"inline"`                  | The type of parsed item this object represents.      |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 425) | expr     | [`Expression`](#Expression) | The expression that was parsed as the inline string. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 426) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 427) #### `AnyRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 428) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 429) A combined type representing any valid roll. This is a combination of the following types:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 430) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 431) -   [`GroupedRoll`](#GroupedRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 432) -   [`FullRoll`](#FullRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 433) -   [`NumberType`](#NumberType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 434) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 435) #### `ModGroupedRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 436) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 437) This object represents a grouped roll with an optional modifier. This object extends the [`RootType`](#RootType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 438) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 439) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 440) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 441) > `{4d6+3d8}kh1`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 442) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 443) | Property | Type                                                                                                 | Description                                      |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 444) | -------- | ---------------------------------------------------------------------------------------------------- | ------------------------------------------------ |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 445) | mods     | `Array<`[`KeepDropModType`](#KeepDropModType)`,`[`SuccessFailureModType`](#SuccessFailureModType)`>` | The modifiers to be applied to the grouped roll. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 446) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 447) #### `SuccessFailureCritModType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 448) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 449) An object representing a success test modifier. This object extends the [`ParsedType`](#ParsedType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 450) A `"success"` or `"failure"` modifier converts the result into a success type result which returns the number of rolls that meet the target.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 451) A `"crit"` or `"critfail"` modifier tests the roll for whether or not the roll should be displayed as a critical success or critical failure.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 452) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 453) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 454) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 455) > Success: `3d6>3`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 456) > Failure: `3d6f<3`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 457) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 458) | Property | Type                                       | Description                                       |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 459) | -------- | ------------------------------------------ | ------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 460) | type     | `"success", "failure", "crit", "critfail"` | The type of parsed item this object represents.   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 461) | mod      | [`CompareOperation`](#CompareOperation)    | The check type to use for the condition.          |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 462) | expr     | [`RollExpression`](#RollExpression)        | An expression representing the success condition. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 463) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 464) #### `SuccessFailureModType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 465) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 466) Equivalent to the [`SuccessFailureCritModType`](#SuccessFailureCritModType) but only supporting "success" and "failure" modifiers. This object extends the [`SuccessFailureCritModType`](#SuccessFailureCritModType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 467) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 468) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 469) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 470) > Success: `3d6>3`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 471) > Failure: `3d6f<3`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 472) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 473) | Property | Type                                    | Description                                       |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 474) | -------- | --------------------------------------- | ------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 475) | type     | `"success", "failure"`                  | The type of parsed item this object represents.   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 476) | mod      | [`CompareOperation`](#CompareOperation) | The check type to use for the condition.          |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 477) | expr     | [`RollExpression`](#RollExpression)     | An expression representing the success condition. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 478) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 479) #### `MatchModType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 480) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 481) An object representing a match type modifier, used to modify the display of dice output in roll20. This object extends the [`ParsedType`](#ParsedType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 482) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 483) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 484) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 485) > `2d6m`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 486) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 487) When used with the `mt` extension, will return the number of matches found.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 488) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 489) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 490) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 491) > `20d6mt`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 492) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 493) Additional arguments can be specified that increase the required number of matches or to add a constraint to matches.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 494) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 495) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 496) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 497) > `20d6mt3 counts matches of 3 items`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 498) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 499) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 500) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 501) > `20d6m>3 Only counts matches where the rolled value is > 3`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 502) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 503) | Property | Type                                    | Description                                                                                            |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 504) | -------- | --------------------------------------- | ------------------------------------------------------------------------------------------------------ |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 505) | type     | `"match"`                               | The type of parsed item this object represents.                                                        |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 506) | min      | [`NumberType`](#NumberType)             | The minimum number of matches to accept. This property defaults to 2 as a [`NumberType`](#NumberType). |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 507) | count    | `boolean`                               | Whether or not to count the matches.                                                                   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 508) | mod?     | [`CompareOperation`](#CompareOperation) | The check type to use for the match condition, if specified. This field is optional.                   |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 509) | expr?    | [`RollExpression`](#RollExpression)     | An expression representing the match condition, if specified. This field is optional.                  |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 510) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 511) #### `KeepDropModType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 512) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 513) An object representing a keep or drop modifier, specifying a number of dice rolls to keep or drop, either the highest or lowest rolls. This object extends the [`ParsedType`](#ParsedType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 514) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 515) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 516) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 517) > Keep: `2d20kh1`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 518) > Drop: `2d20dl1`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 519) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 520) | Property | Type                                | Description                                                                                                                               |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 521) | -------- | ----------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 522) | type     | `"keep", "drop"`                    | The type of parsed item this object represents.                                                                                           |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 523) | highlow  | [`HighLowType`](#HighLowType)       | Whether to keep/drop the highest or lowest roll.                                                                                          |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 524) | expr     | [`RollExpression`](#RollExpression) | An expression representing the number of rolls to keep/drop. This property defaults to 1 as a [`NumberType`](#NumberType). Example: `2d6` |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 525) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 526) #### `GroupedRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 527) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 528) This object represents a group of rolls combined, with optional modifiers. This object extends the [`ModGroupedRoll`](#ModGroupedRoll) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 529) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 530) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 531) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 532) > `{2d6,3d6}`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 533) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 534) | Property | Type                                           | Description                                     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 535) | -------- | ---------------------------------------------- | ----------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 536) | type     | `"group"`                                      | The type of parsed item this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 537) | rolls    | `Array<`[`RollExpression`](#RollExpression)`>` | The group of rolls included in this group.      |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 538) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 539) #### `RollExpressionType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 540) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 541) An object representing a roll expression including complex rolls and groups, only allows addition operations. This object extends the [`RootType`](#RootType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 542) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 543) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 544) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 545) > `{2d6,3d6}kh1 + {3d6 + 2d6}kh2`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 546) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 547) | Property | Type                                                                                                                                | Description                                                |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 548) | -------- | ----------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 549) | head     | [`RollOrExpression`](#RollOrExpression)                                                                                             | The initial roll or expression for the roll expression.    |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 550) | type     | `"diceExpression"`                                                                                                                  | The type of parsed item this object represents.            |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 551) | ops      | `Array<`[`MathType`](#MathType)`<`[`RollOrExpression`](#RollOrExpression)`,`[`DiceGroupMathOperation`](#DiceGroupMathOperation)`>>` | The operations to apply to the initial roll or expression. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 552) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 553) #### `RollExpression`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 554) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 555) A helper type combination of a complex roll expression, a roll, or a math expression. Represents the following types:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 556) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 557) -   [`RollExpressionType`](#RollExpressionType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 558) -   [`RollOrExpression`](#RollOrExpression)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 559) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 560) #### `RollOrExpression`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 561) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 562) A helper type combination of a roll, or a math expression. Represents the following types:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 563) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 564) -   [`FullRoll`](#FullRoll)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 565) -   [`Expression`](#Expression)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 566) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 567) #### `FullRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 568) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 569) An object representing a roll including the dice roll, and any modifiers. This object extends the [`DiceRoll`](#DiceRoll) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 570) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 571) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 572) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 573) > `2d6kh1`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 574) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 575) | Property | Type                                                                         | Description                                                             |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 576) | -------- | ---------------------------------------------------------------------------- | ----------------------------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 577) | mods?    | `Array<`[`ReRollMod`](#ReRollMod)`,`[`KeepDropModType`](#KeepDropModType)`>` | Any modifiers attached to the roll. This property is optional.          |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 578) | targets? | `Array<`[`SuccessFailureCritModType`](#SuccessFailureCritModType)`>`         | Any success or failure targets for the roll. This property is optional. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 579) | match?   | [`MatchModTyp`](#MatchModTyp)                                                | Any match modifiers for the roll. This property is optional.            |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 580) | sort?    | [`SortRollType`](#SortRollType)                                              | Any sort operations to apply to the roll. This property is optional.    |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 581) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 582) #### `SortRollType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 583) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 584) A sort operation to apply to a roll. This object extends the [`ParsedType`](#ParsedType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 585) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 586) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 587) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 588) > `10d6sa`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 589) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 590) | Property | Type      | Description                                     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 591) | -------- | --------- | ----------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 592) | type     | `"sort"`  | The type of parsed item this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 593) | asc      | `boolean` | Whether to sort ascending or descending.        |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 594) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 595) #### `ReRollMod`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 596) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 597) An object representing a re-roll operation to apply to a roll. Can be one of the following types:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 598) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 599) -   `"explode"`: re-rolls any dice that meet the target, continuing if the new roll matches
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 600) -   `"compound"`: re-rolls any dice that meet the target, continuing if the new roll matches and adding the results into a single roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 601) -   `"penetrate"`: re-rolls any dice that meet the target subtracting 1 from the new value, continuing if the new roll matches
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 602) -   `"reroll"`: re-rolls a die as long as it meets the target, keeping the final roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 603) -   `"rerollOnce"`: re-rolls a die once if it meets the target, keeping the new roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 604) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 605) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 606) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 607) > `2d6!`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 608) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 609) | Property | Type                                                         | Description                                            |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 610) | -------- | ------------------------------------------------------------ | ------------------------------------------------------ |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 611) | type     | `"explode", "compound", "penetrate", "reroll", "rerollOnce"` | The type of parsed item this object represents.        |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 612) | target   | [`TargetMod`](#TargetMod)                                    | The target modifier to compare the roll value against. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 613) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 614) #### `TargetMod`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 615) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 616) An object represting a target modifier to apply to a roll. This object extends the [`ParsedType`](#ParsedType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 617) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 618) | Property | Type                                    | Description                                            |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 619) | -------- | --------------------------------------- | ------------------------------------------------------ |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 620) | type     | `"target"`                              | The type of parsed item this object represents.        |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 621) | mod      | [`CompareOperation`](#CompareOperation) | The check type to use for the condition.               |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 622) | value    | [`RollExpr`](#RollExpr)                 | An expression representing the target condition value. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 623) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 624) #### `DiceRoll`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 625) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 626) The representation of a die roll. This object extends the [`RootType`](#RootType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 627) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 628) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 629) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 630) > `2d6`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 631) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 632) | Property | Type                                              | Description                                                                              |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 633) | -------- | ------------------------------------------------- | ---------------------------------------------------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 634) | die      | [`RollExpr`](#RollExpr)`,`[`FateExpr`](#FateExpr) | The die value to roll against, can be a fate die, a number or a complex roll expression. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 635) | count    | [`RollExpr`](#RollExpr)                           | The number of time to roll this die.                                                     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 636) | type     | `"die"`                                           | The type of parsed item this object represents.                                          |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 637) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 638) #### `FateExpr`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 639) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 640) The representation of a fate die roll. This object extends the [`ParsedType`](#ParsedType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 641) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 642) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 643) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 644) > `2dF`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 645) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 646) | Property | Type     | Description                                     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 647) | -------- | -------- | ----------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 648) | type     | `"fate"` | The type of parsed item this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 649) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 650) #### `RollExpr`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 651) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 652) A helper type combination of a number or value that is not an expression. Represents the following types:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 653) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 654) -   [`MathExpression`](#MathExpression)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 655) -   [`NumberType`](#NumberType)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 656) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 657) #### `Expression`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 658) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 659) A helper type combination of expression types. Represents the following types:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 660) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 661) -   [`InlineExpression`](#InlineExpression)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 662) -   [`MathExpression`](#MathExpression)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 663) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 664) #### `MathExpression`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 665) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 666) A math type expression between two or more dice rolls. This object extends the [`RootType`](#RootType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 667) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 668) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 669) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 670) > `2d6 + 3d6 * 4d6`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 671) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 672) | Property | Type                                                        | Description                                     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 673) | -------- | ----------------------------------------------------------- | ----------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 674) | head     | [`AnyRoll`](#AnyRoll)                                       | The initial roll to perform operations against. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 675) | type     | `"expression"`                                              | The type of parsed item this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 676) | ops      | `Array<`[`MathType`](#MathType)`<`[`AnyRoll`](#AnyRoll)`>>` | The operations to apply to the initial roll.    |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 677) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 678) #### `MathType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 679) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 680) An object representating an roll math operation to be applied and the value to apply it to. This object extends the [`ParsedType`](#ParsedType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 681) The interface for this object takes a templated type `TailType` which specifies the type of the second value used in the operation.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 682) There is a second templated type `OpValues` which specifies the type of operations that can be used. This defaults to `Array<`[`MathOperation`](#MathOperation)>`.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 683) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 684) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 685) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 686) > `+ 3d6 (as part of 2d6 + 3d6)`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 687) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 688) | Property | Type       | Description                                     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 689) | -------- | ---------- | ----------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 690) | type     | `"math"`   | The type of parsed item this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 691) | op       | `OpValues` | The math operation to perform.                  |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 692) | tail     | `TailType` | The second value to use in the operation.       |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 693) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 694) #### `MathFunctionExpression`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 695) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 696) An object representing a math function to be applied and the expression to apply it to. This object extends the [`RootType`](#RootType) interface.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 697) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 698) **Example**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 699) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 700) > `floor(3d6 / 2d4)`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 701) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 702) | Property | Type                            | Description                                     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 703) | -------- | ------------------------------- | ----------------------------------------------- |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 704) | type     | `"mathfunction"`                | The type of parsed item this object represents. |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 705) | op       | [`MathFunction`](#MathFunction) | The function to be applied.                     |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 706) | expr     | [`AnyRoll`](#AnyRoll)           | The expression to apply the function on.        |
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 707) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 708) ### Helper Types
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 709) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 710) The following are support types used by the above interfaces.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 711) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 712) #### `DiceGroupMathOperation`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 713) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 714) A helper type representing the valid operations for a math operation on a group of dice.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 715) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 716) > `"+" | "-"`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 717) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 718) #### `MathOperation`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 719) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 720) A helper type representing the valid operations for a math operation.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 721) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 722) > `"+" | "-" | "*" | "/" | "%" | "**"`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 723) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 724) #### `MathFunction`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 725) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 726) A helper type representing the valid operations for a math operation.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 727) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 728) > `"floor" | "ceil" | "round" | "abs"`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 729) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 730) #### `CriticalType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 731) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 732) A helper type used when marking a roll as a critical success or failure.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 733) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 734) > `"success" | "failure" | null`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 735) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 736) #### `CompareOperation`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 737) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 738) A helper type for the available operations for a comparison point.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 739) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 740) > `">" | "<" | "="`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 741) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 742) #### `HighLowType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 743) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 744) A helper type used to determine which rolls to keep or drop.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 745) 
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 746) > `"h" | "l" | null`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  1) import { RootType } from "./parsedRollTypes";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  2) import { RollBase } from "./rollTypes";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  3) export declare class DiceRoller {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  4)     randFunction: () => number;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  5)     maxRollCount: number;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  6)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  7)      * The DiceRoller class that performs parsing and rolls of {@link https://wiki.roll20.net/Dice_Reference roll20 format} input strings
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  8)      * @constructor
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  9)      * @param randFunction The random number generator function to use when rolling, default: Math.random
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 10)      * @param maxRolls The max number of rolls to perform for a single die, default: 1000
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 11)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 12)     constructor(randFunction?: () => number, maxRolls?: number);
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 13)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 14)      * Parses and returns an representation of a dice roll input string
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 15)      * @param input The input string to parse
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 16)      * @returns A {@link RootType} object representing the parsed input string
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 17)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 18)     parse(input: string): RootType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 19)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 20)      * Parses and rolls a dice roll input string, returning an object representing the roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 21)      * @param input The input string to parse
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 22)      * @returns A {@link RollBase} object representing the rolled dice input string
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 23)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 24)     roll(input: string): RollBase;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 25)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 26)      * Parses and rolls a dice roll input string, returning the result as a number
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 27)      * @param input The input string to parse
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 28)      * @returns The final number value of the result
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 29)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 30)     rollValue(input: string): number;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 31)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 32)      * Rolls a previously parsed dice roll input string, returning an object representing the roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 33)      * @param parsed A parsed input as a {@link RootType} string to be rolled
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 34)      * @returns A {@link RollBase} object representing the rolled dice input string
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 35)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 36)     rollParsed(parsed: RootType): RollBase;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 37)     private rollType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 38)     private rollDiceExpr;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 39)     private rollGroup;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 40)     private rollDie;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 41)     private rollExpression;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 42)     private rollFunction;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 43)     private applyGroupMod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 44)     private getGroupModMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 45)     private applyMod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 46)     private getModMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 47)     private applySort;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 48)     private getCritSuccessMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 49)     private getCritFailureMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 50)     private getSuccessMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 51)     private getFailureMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 52)     private getKeepMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 53)     private getDropMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 54)     private getExplodeMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 55)     private getCompoundMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 56)     private getPenetrateMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 57)     private getReRollMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 58)     private getReRollOnceMethod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 59)     private successTest;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 60)     private reRoll;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 61)     private generateDiceRoll;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 62)     private generateFateRoll;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 63) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  1) import { RollBase } from "./rollTypes";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  2) /** An example renderer class that renders a roll to a string in a markdown format, compatible with Discord */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  3) export declare class DiscordRollRenderer {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  4)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  5)      * Renders a dice roll in a format compatible with Discord
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  6)      * @param roll a {@link RollBase} object that has been generated by the {@link DiceRoller}
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  7)      * @returns a string representing the roll that can be used on Discord
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  8)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  9)     render(roll: RollBase): string;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 10)     private doRender;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 11)     private renderGroup;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 12)     private renderGroupExpr;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 13)     private renderDie;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 14)     private renderExpression;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 15)     private renderFunction;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 16)     private addBrackets;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 17)     private stripBrackets;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 18)     private renderRoll;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 19)     private renderFateRoll;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 20) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 1) export * from "./diceRoller";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 2) export * from "./parsedRollTypes";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 3) export * from "./rollTypes";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 4) export * from "./discordRollRenderer";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   1) import { MathFunction, DiceGroupMathOperation, MathOperation, CompareOperation, HighLowType } from "./utilityTypes";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   2) /** The type of the parsed object  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   3) export declare type ParsedObjectType = "number" | "inline" | "success" | "failure" | "match" | "keep" | "drop" | "group" | "diceExpression" | "sort" | "explode" | "compound" | "penetrate" | "reroll" | "rerollOnce" | "target" | "die" | "fate" | "expression" | "expression" | "math" | "crit" | "critfail" | "mathfunction";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   4) /** The base interface for all parsed types */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   5) export interface ParsedType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   6)     /** The type of parsed item this object represents */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   7)     type: ParsedObjectType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   8) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   9) /** The base interface for a subset of parsed types */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  10) export interface RootType extends ParsedType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  11)     /** The text label attached to this roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  12)     label?: string;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  13)     /** A boolean flag to indicate if this is the root of the parse tree */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  14)     root: boolean;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  15) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  16) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  17)  * A single number in the input
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  18)  * @example 17
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  19)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  20) export interface NumberType extends RootType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  21)     type: "number";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  22)     /** The value of the number */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  23)     value: number;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  24) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  25) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  26)  * An inline dice expression contained in a string
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  27)  * @example I want to roll [[2d20]] dice
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  28)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  29) export interface InlineExpression extends RootType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  30)     type: "inline";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  31)     /** The expression that was parsed as the inline string */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  32)     expr: Expression;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  33) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  34) /** A combined type representing any roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  35) export declare type AnyRoll = GroupedRoll | FullRoll | NumberType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  36) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  37)  * A grouped roll with a modifier
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  38)  * @example {4d6+3d8}kh1
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  39)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  40) export interface ModGroupedRoll extends RootType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  41)     /** The modifiers to be applied to the grouped roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  42)     mods?: (KeepDropModType | SuccessFailureModType)[];
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  43) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  44) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  45)  * A success test modifier.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  46)  * A `"success"` or `"failure"` modifier converts the result into a success type result which returns the number of rolls that meet the target.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  47)  * A `"crit"` or `"critfail"` modifier tests the roll for whether or not the roll should be displayed as a critical success or critical failure.
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  48)  * @example 3d6>3
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  49)  * @example 3d6f<3
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  50)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  51) export interface SuccessFailureCritModType extends ParsedType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  52)     type: "success" | "failure" | "crit" | "critfail";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  53)     /** The operation to use for the comparison */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  54)     mod: CompareOperation;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  55)     /** An expression representing the success or failure comparison */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  56)     expr: RollExpression;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  57) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  58) /** Equivalent to the `SuccessFailureCritModType` but only supporting "success" and "failure" */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  59) export interface SuccessFailureModType extends SuccessFailureCritModType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  60)     type: "success" | "failure";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  61) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  62) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  63)  * A match type modifier, used to modify the display of dice output in roll20
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  64)  * @example 2d6m
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  65)  *
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  66)  * When used with the `mt` extension, will return the number of matches found
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  67)  * @example 20d6mt
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  68)  *
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  69)  * Additional arguments can be specified that increase the required number of matches or to add a constraint to matches
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  70)  * @example 20d6mt3 counts matches of 3 items
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  71)  * @example 20d6m>3 Only counts matches where the rolled value is > 3
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  72)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  73) export interface MatchModType extends ParsedType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  74)     type: "match";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  75)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  76)      * The minimum number of matches to accept
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  77)      * @default 2 as a `NumberType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  78)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  79)     min: NumberType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  80)     /** Whether or not to count the matches */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  81)     count: boolean;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  82)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  83)      * The check type to use for the match condition, if specified
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  84)      * @optional
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  85)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  86)     mod?: CompareOperation;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  87)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  88)      * An expression representing the match condition, if specified
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  89)      * @optional
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  90)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  91)     expr?: RollExpression;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  92) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  93) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  94)  * A keep or drop modifier specifies a number of dice rolls to keep or drop, either the highest or lowest rolls
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  95)  * @example 2d20kh1
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  96)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  97) export interface KeepDropModType extends ParsedType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  98)     type: "keep" | "drop";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  99)     /** Whether to keep/drop the highest or lowest roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 100)     highlow: HighLowType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 101)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 102)      * An expression representing the number of rolls to keep
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 103)      * @example 2d6
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 104)      * @default 1 as a `NumberType`
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 105)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 106)     expr: RollExpression;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 107) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 108) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 109)  * Represents a group of rolls combined, with optional modifiers
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 110)  * @example {2d6,3d6}
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 111)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 112) export interface GroupedRoll extends ModGroupedRoll {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 113)     type: "group";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 114)     rolls: RollExpression[];
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 115) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 116) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 117)  * A roll expression including complex rolls and groups, only allows addition operations
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 118)  * @example {2d6,3d6}kh1 + {3d6 + 2d6}kh2
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 119)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 120) export interface RollExpressionType extends RootType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 121)     /** The initial roll or expression for the roll expression */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 122)     head: RollOrExpression;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 123)     type: "diceExpression";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 124)     /** The operations to apply to the initial roll or expression */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 125)     ops: MathType<RollOrExpression, DiceGroupMathOperation>[];
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 126) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 127) /** A combination of a complex roll expression, a roll, or a math expression. Used as a helper for type combinations */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 128) export declare type RollExpression = RollExpressionType | RollOrExpression;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 129) /** A combination of a roll, or a math expression. Used as a helper for type combinations */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 130) export declare type RollOrExpression = FullRoll | Expression;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 131) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 132)  * A roll object including the dice roll, and any modifiers
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 133)  * @example 2d6kh1
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 134)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 135) export interface FullRoll extends DiceRoll {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 136)     /** Any modifiers attached to the roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 137)     mods?: (ReRollMod | KeepDropModType)[];
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 138)     /** Any success or failure targets for the roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 139)     targets?: (SuccessFailureCritModType)[];
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 140)     /** Any match modifiers for the roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 141)     match?: MatchModType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 142)     /** Any sort operations to apply to the roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 143)     sort?: SortRollType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 144) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 145) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 146)  * A sort operation to apply to a roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 147)  * @example 10d6sa
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 148)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 149) export interface SortRollType extends ParsedType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 150)     type: "sort";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 151)     /** Whether to sort ascending or descending */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 152)     asc: boolean;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 153) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 154) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 155)  * A re-roll operation to apply to a roll. Can be one of the following types:
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 156)  * - `explode`: re-rolls any dice that meet the target, continuing if the new roll matches
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 157)  * - `compound`: re-rolls any dice that meet the target, continuing if the new roll matches and adding the results into a single roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 158)  * - `penetrate`: re-rolls any dice that meet the target subtracting 1 from the new value, continuing if the new roll matches
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 159)  * - `reroll`: re-rolls a die as long as it meets the target, keeping the final roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 160)  * - `rerollOnce`: re-rolls a die once if it meets the target, keeping the new roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 161)  * @example 2d6!
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 162)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 163) export interface ReRollMod extends ParsedType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 164)     type: "explode" | "compound" | "penetrate" | "reroll" | "rerollOnce";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 165)     /** The target modifier to compare the roll value against */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 166)     target: TargetMod;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 167) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 168) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 169)  * A target modifier to apply to a roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 170)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 171) export interface TargetMod extends ParsedType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 172)     type: "target";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 173)     /** The check type to use for the condition */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 174)     mod: CompareOperation;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 175)     /** An expression representing the target condition value */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 176)     value: RollExpr;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 177) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 178) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 179)  * The representation of a die roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 180)  * @example 2d6
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 181)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 182) export interface DiceRoll extends RootType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 183)     /** The die value to roll against, can be a fate die, a number or a complex roll expression */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 184)     die: RollExpr | FateExpr;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 185)     /** The number of time to roll this die */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 186)     count: RollExpr;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 187)     type: "die";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 188) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 189) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 190)  * The representation of a fate die roll
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 191)  * @example 2dF
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 192)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 193) export interface FateExpr extends ParsedType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 194)     type: "fate";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 195) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 196) /** A combination of a number or value that is not an expression. Used as a helper for type combinations */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 197) export declare type RollExpr = MathExpression | NumberType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 198) /** A combination of expression types. Used as a helper for type combinations */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 199) export declare type Expression = InlineExpression | MathExpression;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 200) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 201)  * A math type expression between two or more dice rolls
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 202)  * @example 2d6 + 3d6 * 4d6
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 203)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 204) export interface MathExpression extends RootType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 205)     /** The initial roll to perform operations against */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 206)     head: AnyRoll;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 207)     type: "expression";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 208)     /** The operations to apply to the initial roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 209)     ops: MathType<AnyRoll>[];
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 210) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 211) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 212)  * A representation of an operation to be applied and the value to apply it to
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 213)  * @param TailType The type of the second value used in the operation
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 214)  * @param OpValues The possible operations that can be used
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 215)  * @example + 3d6 (as part of 2d6 + 3d6)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 216)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 217) export interface MathType<TailType, OpValues = MathOperation> extends ParsedType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 218)     type: "math";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 219)     /** The math operation to perform */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 220)     op: OpValues;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 221)     /** The second value to use in the operation */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 222)     tail: TailType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 223) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 224) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 225)  * A representation of a math function to be applied and the expression to apply it to
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 226)  * @example floor(3d6 / 2d4)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 227)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 228) export interface MathFunctionExpression extends RootType {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 229)     type: "mathfunction";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 230)     /** The function to be applied */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 231)     op: MathFunction;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 232)     /** The expression to apply the function on */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 233)     expr: AnyRoll;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 234) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   1) import { MathFunction, MathOperation, DiceGroupMathOperation, CriticalType } from "./utilityTypes";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   2) /** The following types of roll can be used */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   3) export declare type RollType = "number" | "diceexpressionroll" | "expressionroll" | "grouproll" | "fate" | "die" | "roll" | "fateroll" | "mathfunction";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   4) /** The base class for all die rolls, extended based upon the type property */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   5) export interface RollBase {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   6)     /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   7)      * Was the roll a success, for target number rolls
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   8)      * @example 3d6 > 3
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400   9)      */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  10)     success: boolean;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  11)     /** The type of roll that this object represents */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  12)     type: RollType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  13)     /** Is the roll still valid, and included in calculations */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  14)     valid: boolean;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  15)     /** The rolled or calculated value of this roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  16)     value: number;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  17)     /** The display label for this roll */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  18)     label?: string;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  19)     /** A property used to maintain ordering of dice rolls within groups */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  20)     order: number;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  21) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  22) /** An intermediate interface extended for groups of dice */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  23) export interface GroupedRollBase extends RollBase {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  24)     /** The rolls included as part of this group */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  25)     dice: RollBase[];
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  26) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  27) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  28)  * A representation of a dice expression
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  29)  * @example 2d20 + 6d6
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  30)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  31) export interface DiceExpressionRoll extends GroupedRollBase {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  32)     type: "diceexpressionroll";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  33)     /** The operations to perform on the rolls */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  34)     ops: DiceGroupMathOperation[];
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  35) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  36) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  37)  * A representation of a mathematic expression
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  38)  * @example 20 * 17
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  39)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  40) export interface ExpressionRoll extends GroupedRollBase {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  41)     type: "expressionroll";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  42)     /** The operations to perform on the rolls */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  43)     ops: MathOperation[];
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  44) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  45) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  46)  * A representation of a mathematic function
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  47)  * @example floor(20 / 17)
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  48)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  49) export interface MathFunctionRoll extends RollBase {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  50)     type: "mathfunction";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  51)     /** The operations to perform on the rolls */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  52)     op: MathFunction;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  53)     /** The expression that the function is applied upon */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  54)     expr: RollBase;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  55) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  56) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  57)  * A representation of a group of rolls
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  58)  * @example 4d6,3d6
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  59)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  60) export interface GroupRoll extends GroupedRollBase {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  61)     type: "grouproll";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  62) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  63) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  64)  * The rolled result of a group of dice
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  65)  * @example 6d20
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  66)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  67) export interface DiceRollResult extends RollBase {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  68)     /** The die this result represents */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  69)     die: RollBase;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  70)     type: "die";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  71)     /** Each roll of the die */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  72)     rolls: DieRollBase[];
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  73)     /** The number of rolls of the die */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  74)     count: RollBase;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  75)     /** Whether this is a match result */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  76)     matched: boolean;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  77) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  78) /** An intermediate interface extended for individual die rolls (see below) */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  79) export interface DieRollBase extends RollBase {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  80)     /** The rolled result of the die */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  81)     roll: number;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  82)     /** Whether this roll is a match */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  83)     matched: boolean;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  84) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  85) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  86)  * A roll on a regular die
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  87)  * @example d20
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  88)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  89) export interface DieRoll extends DieRollBase {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  90)     /** The die number to be rolled */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  91)     die: number;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  92)     type: "roll";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  93)     critical: CriticalType;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  94) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  95) /**
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  96)  * A roll on a fate die
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  97)  * @example dF
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  98)  */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  99) export interface FateDieRoll extends DieRollBase {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 100)     type: "fateroll";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 101) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  1) /** A helper type representing the valid operations for a math operation on a group of dice. */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  2) export declare type DiceGroupMathOperation = "+" | "-";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  3) /** A helper type representing the valid operations for a math operation. */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  4) export declare type MathOperation = "+" | "-" | "*" | "/" | "%" | "**";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  5) /** A helper type representing the valid operations for a math operation. */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  6) export declare type MathFunction = "floor" | "ceil" | "round" | "abs";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  7) /** A helper type used when marking a roll as a critical success or failure */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  8) export declare type CriticalType = "success" | "failure" | null;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  9) /** A helper type for the available operations for a comparison point */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 10) export declare type CompareOperation = ">" | "<" | "=";
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 11) /** A helper type used to determine which rolls to keep or drop */
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 12) export declare type HighLowType = "h" | "l" | null;
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  1) {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  2) 	"name": "dice-roller-parser",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  3) 	"version": "0.1.8",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  4) 	"description": "A javascript dice roller that parses roll20 format strings and generates rolled outputs",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  5) 	"main": "dist/index.js",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  6) 	"module": "dist/index.js",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  7) 	"types": "dist/index.d.ts",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  8) 	"typings": "dist/index.d.ts",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  9) 	"files": [
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 10) 		"dist"
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 11) 	],
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 12) 	"scripts": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 13) 		"build": "npm run clean && pegjs src/diceroll.pegjs && tslint -c tslint.json --project tsconfig.json && webpack",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 14) 		"clean": "rimraf dist/ src/diceroll.js",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 15) 		"test": "jest",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 16) 		"prepublishOnly": "npm run build"
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 17) 	},
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 18) 	"repository": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 19) 		"type": "git",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 20) 		"url": "git+https://github.com/BTMorton/dice_roller.git"
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 21) 	},
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 22) 	"keywords": [
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 23) 		"dice",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 24) 		"roller",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 25) 		"roll",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 26) 		"roll20",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 27) 		"rpg",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 28) 		"trpg",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 29) 		"tabletop",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 30) 		"dnd",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 31) 		"d&d",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 32) 		"dungeons",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 33) 		"dragons",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 34) 		"pathfinder"
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 35) 	],
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 36) 	"author": "Ben Morton <ben.morton91@gmail.com>",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 37) 	"license": "MIT",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 38) 	"bugs": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 39) 		"url": "https://github.com/BTMorton/dice_roller/issues"
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 40) 	},
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 41) 	"homepage": "https://github.com/BTMorton/dice_roller#readme",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 42) 	"devDependencies": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 43) 		"@types/jest": "^25.1.4",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 44) 		"@types/node": "^13.9.2",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 45) 		"jest": "^25.1.0",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 46) 		"pegjs": "^0.10.0",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 47) 		"rimraf": "^3.0.2",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 48) 		"ts-jest": "^25.2.1",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 49) 		"ts-loader": "^6.2.1",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 50) 		"tslint": "^6.1.0",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 51) 		"typescript": "^3.8.3",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 52) 		"webpack": "^4.42.0",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 53) 		"webpack-cli": "^3.3.11"
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 54) 	}
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 55) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  1) {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  2)   "name": "frontEnd",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  3)   "lockfileVersion": 3,
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  4)   "requires": true,
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  5)   "packages": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  6)     "": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  7)       "dependencies": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  8)         "dice-roller-parser": "^0.1.8"
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400  9)       }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 10)     },
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 11)     "node_modules/dice-roller-parser": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 12)       "version": "0.1.8",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 13)       "resolved": "https://registry.npmjs.org/dice-roller-parser/-/dice-roller-parser-0.1.8.tgz",
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 14)       "integrity": "sha512-/UYDWMX1FHU6RR3iZGfexKlqyBJXSPuHPkvvpZ8k3QVjaXVc56W5GeLc/0bf9qLZTn1YdVFrIBLzvBt/9UHoNw=="
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 15)     }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 16)   }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 17) }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 1) {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 2)   "dependencies": {
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 3)     "dice-roller-parser": "^0.1.8"
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 4)   }
72bc5aa8 (McKinley Harmon 2024-10-14 21:59:47 -0400 5) }
